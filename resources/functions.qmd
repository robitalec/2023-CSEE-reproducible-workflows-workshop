
R4DS

- https://r4ds.had.co.nz/functions.html
    - "improving reach as a data scientist"
    - "automate common tasks"
    - three big advantages
        - give a function an evocative name that makes your code easier to understand
        - as requirements change, only need to update code in one place instead of many
        - eliminate chance of incremental mistakes when copy pasting 
    - other advantages
        - easier to apply over groups or chunks in data, eg. by individual with lapply/map/data.table's by
    - when to write? 
        - when you've copy pasted more than twice
    - steps
        - develop code for accomplishing the task
        - analyse the code
            - how many inputs
            - look for duplication, eg. calculating the mean multiple times
                - save as intermediate value
        - pick a name 
        - list inputs
        - list arguments
        - place developed code in body of the function
        - check results with eg. NAs, missing values, known results
    - naming
        - snake_case
        - common prefix eg input_select, input_checkbox, input_text
        - dont override existing functions (see conflicted later)
    - conditionals 
        - if else (else if)
        - `||` `&&` combine multiple logical expressions and short-circuit when `||` sees the first true and `&&` sees the first false
        - `|` `&` are vectorized and cannot be directly used in an if unless you also use any / all
    - calling functions
    - checking values
        - stopifnot
        - if else then stop
    - return
        - always last thing 
        - otherwise explicit return
    - environment
        - lexical scoping
            - if variable isnt available in the functions environment, will look in environment where function was defined 
            - in a simple case, eg f(x) {x + y}, this means `y`, but also `{` and `+`
            - if `+` is reassigned it will be used, meaning you can override a function from eg. base R 
        - https://adv-r.hadley.nz/environments.html
            

- iteration (https://r4ds.had.co.nz/iteration.html)
    - we'll use targets' dynamic and static branching instead
    - iterating over a single list/vector/etc
        - for loops
        - purrr::map    
    - multiple inputs
        - purrr::map2
    - loop for side effects
        - purrr::walk
    - managing errors
        - safely
        - try
        - possibly
        - quietly
Exercises

- turn this into a function
    - from code
    - from description of function eg. takes a vector and does XYZ
- what does this function do
    - on slide
    - in R with view source
