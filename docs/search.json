[
  {
    "objectID": "resources/targets.html",
    "href": "resources/targets.html",
    "title": "2023 CSEE Reproducible workflow workshop",
    "section": "",
    "text": "The {targets} documentation and help manual should be the first places to look for details on {targets}. We’ll highlight some pages and links below relevant to the workshop, but be sure to spend time looking through these resources. This is a great example of an R package that has been very thoroughly and thoughtfully documented covering everything from beginner examples to the minutiae of how the package is designed and orchestrates workflows.\n\n\nThis help page is a great place to start when you are looking for help using {targets}. It details things to do before posting, and when you have decided to post a question, where to post it. The {targets} developer prefers using GitHub Discussion Groups for troubleshooting and discussions instead of GitHub Issues.\n\n\n{targets} has a very active discussion group with plenty of past solutions and discussions to search through when you are looking for help.\n\n\n\n\nSome select documentation pages from the {targets} documentation:\n\ntar_target(): targets!\ntar_make(): run the workflow\ntar_meta(): metadata on the workflow including errors, warnings, run times, …\ntar_read(): read a target\ntar_load(): load a target\ntar_visnetwork(): visualize the dependency graph between targets, functions, and objects\ntar_option_set(): sets options for when the {targets} workflow is run\n\nBonus:\n\nuse_targets(): setups a project to use {targets}\ntar_github_actions(): writes a GitHub Actions workflow to run the {targets} workflow on every push to GitHub\n\n\n\nThis vignette is an high-level summary of the features of {targets}.\n\n\n\n\nThe {targets} R package user manual\nThis is the most complete guide to using {targets}. It has info on most of the questions that you will have (although can be complicated - be patient with yourself!). It explains what a target is, best practices for functions, and why error messages can be less intuitive in your {targets} workflow among many other things.\n\n\n\n\n\nThis is an official half-day interactive tutorial on {targets}. It is accompanied by:\n\nCode repository: https://github.com/wlandau/targets-tutorial\nPosit Cloud workspace to try it out without any required downloads or installation: https://posit.cloud/content/1699460\nIntroductory slides: https://wlandau.github.io/targets-tutorial/#1\n\n\n\n\n\n\n\nThis 4 minute video walkthrough gives a short example of how {targets} can be used. It is accompanied by:\n\nUser Manual: A walkthrough to get started\nCode repository: https://github.com/wlandau/targets-four-minutes\nPosit Cloud workspace to try it out without any required downloads or installation: https://posit.cloud/content/3946303\n\n\n\n\n\n\n\n\n\n{tarchetypes} extends {targets} by providing functions to do complex tasks with shortcuts and simpler syntax, making your life easier. For example:\n\ntar_group_by: define groups in a data.frame to split subsequent targets by\ntar_render, tar_quarto: literate programming with {rmarkdown} or {quarto}\ntar_file_read(): tracks a local file and reads the contents\n\nSimilar to {targets}, {tarchetypes} has a very active Discussion Group with plenty of discussions to search through for solutions, tips and tricks.\n\nDocumentation: https://docs.ropensci.org/tarchetypes/\nDiscussion Group: https://github.com/ropensci/tarchetypes/discussions\n\n\n\n\n{stantargets} is a package extending {targets} for Bayesian data analysis with Stan through {cmdstanr}.\n\nDocumentation: https://docs.ropensci.org/stantargets/\nDiscussion Group: https://github.com/ropensci/stantargets/discussions\n\n\n\n\n{jagstargets} is a package extending {targets} for Bayesian data analysis with JAGS through {R2jags}.\n\nDocumentation: https://wlandau.github.io/jagstargets\nDiscussion Group: https://github.com/wlandau/jagstargets/discussions\n\n\n\n\n{gittargets} is a package extending {targets} for data version control.\n\nDocumentation: https://github.com/ropensci/gittargets\nDiscussion Group: https://github.com/ropensci/gittargets/discussions\n\n\n\n\n\nTarget factories are an advanced approach to making pipeline construction easier. Instead of writing many tar_target() calls, a user can replace them with a call to a “target factory”. tar_file_read() from {tarchetypes} is a simple example of this - one call to tar_file_read() creates targets tracking the local file for changes and another to read the local file in with the provided command."
  },
  {
    "objectID": "resources/renv-conflicted.html",
    "href": "resources/renv-conflicted.html",
    "title": "2023 CSEE Reproducible workflow workshop",
    "section": "",
    "text": "The {renv} documentation and vignettes have lots of information on {renv}. We’ll point out the most relevant pages and links, because {renv} can be used for a wide variety of uses on different systems (local machine, Docker, etc.).\n\n\n\n\nThis vignette overviews what {renv} is, and how to use it.\nIt walks us through the workflow of {renv}:\n\n\nCall renv::init() to initialize a new project-local environment with a private R library,\nWork in the project as normal, installing and removing new R packages as they are needed in the project,\nCall renv::snapshot() to save the state of the project library to the lockfile (called renv.lock),\nContinue working on your project, installing and updating R packages as needed.\nCall renv::snapshot() again to save the state of your project library if your attempts to update R packages were successful, or call renv::restore() to revert to the previous state as encoded in the lockfile if your attempts to update packages introduced some new problems.\n\n\nIt also outlines important caveats:\n\n{renv} only solves one small part of the reproducible problem: recording the version of R and R packages that are used in a project\n\nIt does not help if a package version becomes no longer available in the future.\nIt also does not help if a system dependency is missing on the computer attempting to recover an {renv} environment. The system dependency is external and needs to be installed for the project to run successfully.\n\n\n\nHow do you share your project that has an {renv} environment with other people? This vignette walks through the details of collaborating with other users when you have an isolated environment.\n\n\n\nFrequently asked questions about {renv}, a great place to start when troubleshooting {renv}.\n\n\n\n\n\n\nA video by {renv} author Kevin Ushey, outlining why {renv} is important and how to use it.\n\nCode repository: https://github.com/kevinushey/2020-rstudio-conf\n\n\n\n\nDemo on how to set up {renv} in existing projects with biology professor/statistician."
  },
  {
    "objectID": "resources/functions.html",
    "href": "resources/functions.html",
    "title": "2023 CSEE Reproducible workflow workshop",
    "section": "",
    "text": "Links:\n\n1st edition\n2nd edition\nGitHub repository\n\n\n\nWhy write functions?\n\n“Improving reach as a data scientist”\n“Automate common tasks”\nThree big advantages\n\nGive a function an evocative name that makes your code easier to understand\nAs requirements change, only need to update code in one place instead of many\nEliminate chance of incremental mistakes when copy pasting\n\nOther advantages\n\nEasier to apply over groups or chunks in data, eg. by individual with lapply/map/data.table’s by\n\n\nWhen to write functions?\n\nWhen you’ve copy pasted more than twice\n\nHow to write functions?\n\nDevelop code for accomplishing the task\nAnalyse the code\n\nHow many inputs\nLook for duplication, eg. calculating the mean multiple times\n\nSave as intermediate value\n\n\nList inputs\nList arguments\nName function (verb)\n\nsnake_case\nCommon prefix eg input_select, input_checkbox, input_text\nDon’t override existing functions (see conflicted later)\n\nName arguments (nouns)\nPlace developed code in body of the function\nCheck results with eg. NAs, missing values, known results\n\nConditionals\n\nif else (else if)\n|| && combine multiple logical expressions and short-circuit when || sees the first true and && sees the first false\n| & are vectorized and cannot be directly used in an if unless you also use any / all\n\nChecking values\n\nstopifnot\nif else then stop\n\nReturn\n\nalways last thing\notherwise explicit return()\n\nEnvironment\n\nlexical scoping\n\nif variable isnt available in the functions environment, will look in environment where function was defined\nin a simple case, eg f(x) {x + y}, this means y, but also { and +\nif + is reassigned it will be used, meaning you can override a function from eg. base R\n\nhttps://adv-r.hadley.nz/environments.html\n\n\n\n\nNote: we’ll use targets’ dynamic and static branching instead for this workshop\nIterating over a single list/vector/etc\n\nfor loops\npurrr::map\n\nMultiple inputs\n\npurrr::map2\n\nLoop for side effects\n\npurrr::walk\n\nManaging errors\n\npurrr::safely\ntry\npurrr::possibly\npurrr::quietly\n\n\n\n\n\n\n\n\n\n\nThree components of a function\n\narguments (formals()): arguments used to control the function\nbody (body()): code inside the function\nenvironment (environment()): determins how function finds values associated with names\n\nimplicit based on where you defined the function\n\n\nFunctions are objects\nPrimitive functions\n\nonly found in the base package\neg. sum, [\nthey are the exceptions to above, for primitive functions the following return NULL formals(), body(), environment()\nprimitive functions indicated by typeof(f) is “builtin” or “special”\n\nAnonymous functions are used without first assigning them\ndo.call if you have arguments already in a list\nCombining function calls\n\nnesting f(g(x)) is concise, good for short sequences but hard to read (right to left, inside out)\nintermediate objects, requires naming each intermediate object, useful when independent objects are useful otherwise not\npipes let you run and function and then then next one and then the next one (…) in a chain\n\nLexical scoping\n\nname masking\n\n\n\n\nR is at its heart a functional language\nFunctional languages have:\n\nfirst-class functions that behave like any other data structure. you can assign to variables, store them in lists, pass them as arguments, etc\nfunctions that are pure. pure functions satisfy two properties - 1) outputs depend only on inputs where rerunning the function with the same inputs will yield the same results, and 2) functions have no side-effects like changing global variables, writing to disk, displaying to the screen\n\nFor R, functions are ideally either very pure, or very impure (plotting, saving, etc)\nFunctionals are functions that take a function as input and returns a vector as output\n\neg. lapply, apply, tapply, purrr::map\ncommonly used as an alternative to for loops\n(lots of great background)\n\nFunction factories\n\neg. power1 <- function(exp) function(x) x ^ exp, square <- power1(2)\n(beyond scope of workshop)\n\nFunction operators\n\n\n\nChoices\n\nif (condition) true_action\nif (condition) true_action else false_action\nalso else if\ncondition must be length 1\nswitch (https://adv-r.hadley.nz/control-flow.html#switch)\n\nmore compact than a bunch of if else if else\n\n\nLoops\n\nfor\n\ncaution 1:length if length == 0, instead use seq_along, seq.int, etc.\n\nwhile\nrepeat\n\n\n\n\n\n\n\n\n\n\nDefining a function\n\nR automatically returns whichever variable is on the last line of the body of the function\n\nComposing functions\n\ncompose functions by combining eg. two functions into a new function that uses both\nnest function calls by passing the output of one function directly as input to the next (also see pipes)\n\nTesting\n\nuse simple example data instead of your actual data where you might not know what the output value should be\n\nError handling\n\nadd errors and warnings to ensure the inputs and arguments are appropriate eg. the expected class\nerrors and warnings help inform a user about the function’s expectations\n\nDefining defaults\n\nR uses the position of arguments, typically only recommended with a smaller number of arguments\nwith a larger number of arguments, use named arguments to ensure arguments are correctly passed\nset a default value for an argument by passing it with = in the function definition\n\n\n\n\n\nmake decisions using logical comparisons\n\n>, <\n\nuse logical comparisons with if else to define conditional statements\n&& and ||\n\n\n\n\n\nvectorized functions\nvector recycling\nfor or apply?\n\n\n\n\nDetails on variable scoping\n\n\n\n\n\n\n\nif, else control flow in R as conditional statements\nifelse is vectorized\nany returns TRUE if there is at least one TRUE in the vector\nall returns TRUE if all are TRUE in the vector\n\n\n\n\nAlso see above Software Carpentry: Programming with R’s section on Functions (some similar content)\nDefensive programming\n\ndefensive programming can involve including check conditions and throwing errors when something is not as expected\nuse stopifnot() to detect where a conditional statement is FALSE and return an error\n\n\n\n\n\n\n\nWhy is formal testing worth the trouble?\n\nthe informal approach is load the function, experiment with it in console or scrap script, repeat\nan informal approach works fine in the moment, but when you return to the function in the future, say to add a new argument or test a new data type, you have no record of the tests you ran the first time\nbenefits to writing formal tests\n\nfewer bugs since you are explicit about how the code should work\nbetter code structure because if you find it hard to write tests for your functions, it might be that the design of your functions is not ideal\nwhen you discover a bug, write a test that replicates the bug - then making the test pass becomes the concrete goal in fixing the bug\nwhen functions are well covered by tests (robust), you can be confident making changes without accidentally breaking something\n\n\nIntroduction testthat\nTest mechanics and workflow\nExpectations\n\ntesting for\n\nequality\nerrors\nmatch\nlength\ns3 class, s4 class, type\n\n\n\n\n\n\n\n\nhttps://speakerdeck.com/jennybc/how-to-name-files\n\n\n\n\n\n\nCommunication with the user:\n\nfatal errors: stop()\nwarnings: warning()\ninformative output: message()\ninvisible returns (eg. plots): invisible()\n\n\n\n\nEfficient base R\n\nif() vs ifelse()\nis.na() and anyNA()"
  },
  {
    "objectID": "resources/projects.html",
    "href": "resources/projects.html",
    "title": "2023 CSEE Reproducible workflow workshop",
    "section": "",
    "text": "Good file structure allows you to manage all the components of your (often large) projects, while facilitating easy sharing and reducing the risk of accidentally deleting/altering important files. Keeping your raw data file in its own folder (e.g., input/ or raw/ makes it harder to mix up these files with intermediate ones down the line).\nSoftware Carpentry’s R for Reproducible Scientific Analysis:\nBest practices for file structure/data management include: 1. Treat raw data as read-only 2. Store data cleaning scripts in a separate folder and create a second “read-only” data folder to hold the “cleaned” data sets 3. Treat generated output as disposable\nEfficient R Programming suggests a sub-directory resembling something like below to keep things tidy:\n\n\nproject\n└───input/\n└───output/\n└───R/\n└───graphics/\n└───README.md\n\nproject\n└───data/\n    └───derived/\n    └───raw-data/\n└───R/\n└───script/\n└───graphics/\n└───README.md\n\n\nGood Enough Practices in Scientific Computing suggests similar file structure and data management practices.\n\n\n\n\nA README file can act as a type of metadata (see below): it facilitates people using your data, script, etc.\nThere are basic requirements from a README in order to make your work usable (highlighted in our Think/Pair/Share exercise)\n\nARDC Metadata Guide In order to use data, we need to know:\n\nhow the data is structured what it describes\nhow to read it (e.g. column headings and units)\nmethodological information such as instrument settings and calibrations, reagents used, or survey questions\nexactly what they are allowed to do with the data through rights metadata such as licensing\nhow to acknowledge the original creators by citing the data\n\nReproducible Quantitative Methods Metadata is required for open data, by making a data reuse plan we can ensure that our data is usable for other people, into the future.\nMetadata should warn users about problems/inconsistencies in the data and provide checks to make sure data is functioning properly (White et al., 2013)\nCornell University best practices provides a README template that is free to adapt, alter, and use\nExamples:\n\nhttps://github.com/viralemergence/datacov\nhttps://github.com/wildlifeevoeco/MovingAcrossGradients\nhttps://github.com/ropensci/spatsoc\nhttps://github.com/robitalec/statistical-rethinking-colearning-2023\n\n\n\n\nUsing an RStudio Project makes sharing your data/code with others (and your future self) SO MUCH EASIER! One of the main issues with sharing code is the changing working directories/missing files/etc. The RStudio Project completely solves this for you. You can just copy and paste the folder wherever you need it, with nothing breaking.\nSoftware Carpentry’s R for Reproducible Scientific Analysis and Efficient R Programming both discuss further the importance of using RStudio Projects and how to set them up."
  },
  {
    "objectID": "templates/README-dataset-template.html",
    "href": "templates/README-dataset-template.html",
    "title": "2023 CSEE Reproducible workflow workshop",
    "section": "",
    "text": "Format taken from Cohen et al.’s1 GitHub page, look at their README for examples of how to fill in each section. If you have more complex datasets, you should consider more formal types of metadata documentation (see resources (LINK) for more info).\n\n\n\n\n\n\n\n\n\n\n\n\nPlease cite [] when using the data/script in this repository.\n\n\n\nDescribe each row of the dataset, and provide a description of what each column is referring to.\n\n\n\ncolumn name\ndescription\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 Lily E. Cohen, Anna C. Fagre, Binqi Chen, Colin J. Carlson, and Daniel J. Becker. (2022) datacov: An open database of bat coronavirus surveillance (1996 to 2018). version 0.1. Copied README format from www.github.com/viralemergence/datacov on (June 6, 2023). DOI: 10.5281/zenodo.6644163."
  },
  {
    "objectID": "templates/README-paper-template.html",
    "href": "templates/README-paper-template.html",
    "title": "2023 CSEE Reproducible workflow workshop",
    "section": "",
    "text": "Format taken from Webber et al.’s1 GitHub page, look at their README for examples of how to fill in each section.\n\n\n\n\n\n\n\nAuthors:\n\nAuthor 1 + website\n\n\n\n\n\nInclude paper title, where to access scripts, and dependencies."
  },
  {
    "objectID": "templates/README-data-project_template.html",
    "href": "templates/README-data-project_template.html",
    "title": "2023 CSEE Reproducible workflow workshop",
    "section": "",
    "text": "Data Reuse Plan Template\n(template taken from the Mozilla Science Lab’s workshop on Working Open)\n\nDescription (abstract): What is your project about? What is the goal? Why are you doing it? How does this data relate to your project?\nTitle: What do you want to call your data set?\nPermanent Identifier: A way for folks to find your data. Do you have a DOI or other permanent identifier?\nData Source: If you included someone else’s data in your data set, provide information on where it came from. Just like articles, if you use it, cite it. It is preferable to include a permanent identifier like a DOI.\nSubject: In what discipline or subject area is your project?\nRelated publication: Have you published an article, thesis or some other publication based on this data? Include a full citation and permanent identifier, if available.\nData Collector: Person/organization responsible for collecting data\nFunder Information : Is this project sponsored by a funding agency? If so, include name of the funding agency, grant number, and principal investigator name/s & affiliations.\nCollaborators: Are there any collaborators on this project? Provide names and affiliations.\nContact person: Who should someone contact for additional information about the data set? Include affiliation and contact information such as phone number, email, and/or physical address.\nLocation: Where was the data collected? One place? Multiple places? Use geographic coordinates if appropriate.\nPlace of publication: Where is the data made publicly available? Include URL.\nTemporal Coverage: When was the data collected? On a specific date? Specific time? Over a range of dates? Use the international standard date format (YYYY-MM-DD hh:mm.ss) and try to be as specific as possible.\nPublication Date: When was the data made available in the place of publication (above)? Again, use the international standard date format.\nData collection process: What instruments were used to collect the data? how frequently were the data collected? how were data collection sites selected? if there was a sample population, how was it selected?\nData processing: How did you clean the data? how are missing or null values handled? did you write code for processing the data and where can it be found?\nFile index: A listing of folders and files included in the data set. Explain what files will be found in each folder and naming conventions used. Additional files could include any questionnaires or other survey instruments used to collect the data. Be sure to include codebooks and data dictionaries or similar README files.\nFile format/s: What type/s of files are these? Are there multiple formats? What software is needed to use the file/s?"
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "2023 CSEE Reproducible workflow workshop",
    "section": "",
    "text": "Version 3, 29 June 2007\nCopyright © 2007 Free Software Foundation, Inc. <http://fsf.org/>\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\n\n\nThe GNU General Public License is a free, copyleft license for software and other kinds of works.\nThe licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program–to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too.\nWhen we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.\nTo protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others.\nFor example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.\nDevelopers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it.\nFor the developers’ and authors’ protection, the GPL clearly explains that there is no warranty for this free software. For both users’ and authors’ sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions.\nSome devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users’ freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users.\nFinally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free.\nThe precise terms and conditions for copying, distribution and modification follow.\n\n\n\n\n\n“This License” refers to version 3 of the GNU General Public License.\n“Copyright” also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.\n“The Program” refers to any copyrightable work licensed under this License. Each licensee is addressed as “you”. “Licensees” and “recipients” may be individuals or organizations.\nTo “modify” a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a “modified version” of the earlier work or a work “based on” the earlier work.\nA “covered work” means either the unmodified Program or a work based on the Program.\nTo “propagate” a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.\nTo “convey” a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.\nAn interactive user interface displays “Appropriate Legal Notices” to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.\n\n\n\nThe “source code” for a work means the preferred form of the work for making modifications to it. “Object code” means any non-source form of a work.\nA “Standard Interface” means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.\nThe “System Libraries” of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A “Major Component”, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.\nThe “Corresponding Source” for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work’s System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.\nThe Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.\nThe Corresponding Source for a work in source code form is that same work.\n\n\n\nAll rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.\nYou may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.\nConveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.\n\n\n\nNo covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.\nWhen you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work’s users, your or third parties’ legal rights to forbid circumvention of technological measures.\n\n\n\nYou may convey verbatim copies of the Program’s source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.\nYou may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.\n\n\n\nYou may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:\n\na) The work must carry prominent notices stating that you modified it, and giving a relevant date.\nb) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to “keep intact all notices”.\nc) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it.\nd) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so.\n\nA compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an “aggregate” if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation’s users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.\n\n\n\nYou may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:\n\na) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange.\nb) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge.\nc) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b.\nd) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements.\ne) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d.\n\nA separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.\nA “User Product” is either (1) a “consumer product”, which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, “normally used” refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.\n“Installation Information” for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.\nIf you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).\nThe requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.\nCorresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.\n\n\n\n“Additional permissions” are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.\nWhen you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.\nNotwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:\n\na) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or\nb) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or\nc) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or\nd) Limiting the use for publicity purposes of names of licensors or authors of the material; or\ne) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or\nf) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors.\n\nAll other non-permissive additional terms are considered “further restrictions” within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.\nIf you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.\nAdditional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.\n\n\n\nYou may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).\nHowever, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.\nMoreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.\nTermination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.\n\n\n\nYou are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.\n\n\n\nEach time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License.\nAn “entity transaction” is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party’s predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.\nYou may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.\n\n\n\nA “contributor” is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor’s “contributor version”.\nA contributor’s “essential patent claims” are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, “control” includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.\nEach contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor’s essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.\nIn the following three paragraphs, a “patent license” is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To “grant” such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.\nIf you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. “Knowingly relying” means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient’s use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.\nIf, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.\nA patent license is “discriminatory” if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.\nNothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.\n\n\n\nIf conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.\n\n\n\nNotwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such.\n\n\n\nThe Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.\nEach version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License “or any later version” applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation.\nIf the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy’s public statement of acceptance of a version permanently authorizes you to choose that version for the Program.\nLater license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.\n\n\n\nTHERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n\n\nIN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\n\n\nIf the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.\nEND OF TERMS AND CONDITIONS\n\n\n\n\nIf you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.\nTo do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the “copyright” line and a pointer to where the full notice is found.\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\nAlso add information on how to contact you by electronic and paper mail.\nIf the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode:\n<program>  Copyright (C) <year>  <name of author>\nThis program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type 'show c' for details.\nThe hypothetical commands show w and show c should show the appropriate parts of the General Public License. Of course, your program’s commands might be different; for a GUI interface, you would use an “about box”.\nYou should also get your employer (if you work as a programmer) or school, if any, to sign a “copyright disclaimer” for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see <http://www.gnu.org/licenses/>.\nThe GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read <http://www.gnu.org/philosophy/why-not-lgpl.html>."
  },
  {
    "objectID": "exercises/02-functions-development.html",
    "href": "exercises/02-functions-development.html",
    "title": "2023 CSEE Reproducible workflow workshop",
    "section": "",
    "text": "We’ll use the following approach for developing functions.\nFirst, the setup:\n\nSetup the function\n\nMake a function script in the R/ directory named function_name.R\n\nWrite the function’s skeleton (name, arguments, curly braces)\n\n\nSetup the test script\n\nMake a corresponding test script in the tests/ directory named test_function_name.R.\nLoad any required packages (library(package))\nSource the function (source('R/function_name.R))\nLoad example data and/or arguments for the function\n\n\n\nThen the approach for developing functions:\n\nFill in the body of the function, state the returned object, add arguments in the function script (R/function_name.R)\nAdd a test that uses the function with the example data\nRun the entire test script\nCheck the output, note required changes, errors, warnings, etc\nHead back to the function script to make changes\nRun the entire test script\n\nCheck the test output, tweak the function, repeat!\nThis process of editing two files might seem like extra work, but we recommend separating the function’s definition from the bits of code we use to test it. Think of the test script as your isolated playground to test and develop the function and your function script as the sheltered environment where you carefully tweak the function. You can also use this test script as a place to develop the function using the same inputs and arguments as the function. Keeping these parts separate can help to avoid mysterious errors and general chaos!\n\n\nInstruction: setup your function script and test script for your new function prepare_csv().\nUse whichever function you prefer for reading CSVs (eg. data.table::fread(), or readr::read_csv()). For cleaning column names, we’ll use the function clean_names() from the janitor package.\nNote: since we are writing a function to read the data in, we’ll test the function with the data’s path instead. We’ll use the example dataset for adult and chick counts described in the README. For example:\n\npath_counts <- file.path('raw-data', 'adelie-adult-chick-counts.csv')\n\nUse the section “Development” in your test script (tests/test_prepare_csv.R) to develop the body of your function. Use path_counts and the function for reading CSVs, then the clean_names() function from the janitor package. Add the code to the body of your function prepare_csv() and test!\n\nHints\n\nThis function has two steps: reading a CSV from a path and cleaning the column names.\nBoth of these steps are going to use functions from external packages, so we only have to put them together.\nThe function’s arguments should include the path to the CSV.\nFirst, take the path and pass it to the function for reading CSVs.\nThen, pass the data.frame returned to the clean_names() function from the janitor package."
  },
  {
    "objectID": "exercises/03-functions-checks.html",
    "href": "exercises/03-functions-checks.html",
    "title": "2023 CSEE Reproducible workflow workshop",
    "section": "",
    "text": "Checks in functions are used to ensure inputs and arguments are as expected, to handle errors and to provide informative error messages to users. In this workshop we are going to focus on writing checks with the function stopifnot because it is simple and succinct. It was recently improved in R 4.0.0 when the R development team added the option to provide a more informative error which will help us clearly communicate with our users (and ourselves).\nstopifnot() expects a logical statement that you are expecting to be true, and, if not, stopifnot() will throw an error.\nTo build logical statements, you may find following list of functions useful:\n\nclass checks\n\n\nis.integer, is.numeric, is.data.frame, is.character\n\n\n\nnulls, NAs, NaNs\n\n\nis.null, is.na, is.nan\n\n\n\ndimensions\n\n\nlength, nrow, ncol, dim\n\n\n\nequality, comparisons\n\n\n== (equals)\n\n>, <, >=, <= (less than, greater than, less than or equal to, greater than or equal to)\nidentical\n\n\nnegation\n\n!\n\n\ndirectories, files\n\nfile.exists\ndir\n\nbasename, dirname\n\n\n\n\n\n\nInstruction: Write a series of logical statements for the following objects then consult the solution to check your work. Focus only on the logical statement for now, we’ll use stopifnot in the following exercises.\nNumber\n\ncheck if x is a numeric, integer, double\ncheck if x is of length 1\ncheck if x is greater than 0\n\n\nx <- 10\n\n\nShow solution\n\nis.numeric(x)\n\n[1] TRUE\n\nis.integer(x)\n\n[1] FALSE\n\nis.double(x)\n\n[1] TRUE\n\nlength(x) == 1\n\n[1] TRUE\n\nx > 0\n\n[1] TRUE\n\n\ndata.frame\n\ncheck if DF is a data.frame, list, matrix\ncheck if DF has two columns and three rows\ncheck if DF’s column numbers is an integer, double, numeric\n\n\nDF <- data.frame(colors = c('red', 'green', 'blue'), numbers = c(42.1, 2L, 10))\n\n\nShow solution\n\nis.data.frame(DF)\n\n[1] TRUE\n\nis.list(DF)\n\n[1] TRUE\n\nis.matrix(DF)\n\n[1] FALSE\n\nncol(DF) == 2\n\n[1] TRUE\n\nnrow(DF) == 3\n\n[1] TRUE\n\nis.integer(DF$numbers)\n\n[1] FALSE\n\nis.double(DF$numbers)\n\n[1] TRUE\n\nis.numeric(DF$numbers)\n\n[1] TRUE\n\n\n\nFirst, write a function to plot a data.frame, providing columns names for the data to be plotted on the x and y axes. Use the example data that we prepared with our prepare_csv function.\nFollow the steps from our approach to developing functions:\n\nSetup the function\n\nMake a function script in the R/ directory named plot_xy.R\n\nWrite the function’s skeleton (name, arguments, curly braces)\n\n\nSetup the test script\n\nMake a corresponding test script in the tests/ directory named test_plot_xy.R.\nLoad any required packages (library(package))\nSource the function (source('R/function.R))\nLoad example data and/or arguments for the function\n\n\n\nAdd a new section ‘Development’ in the test script (tests/test_plot_xy.R) to develop the body of your function. Since we have already built a function for preparing CSV files, use it in your test script, and your choice of base R plotting or ggplot2. Add the code to your function plot_xy() and test!\n\npath_counts <- file.path('raw-data', 'adelie-adult-chick-counts.csv')\nprep_counts <- prepare_csv(path_counts)\n\n\nHints: base R\n\nThis function has one step: taking an input data.frame and generating a plot.\nThe function’s arguments should include the data.frame, as well as the column names for the X and Y axes.\nPass the data.frame’s to the plot function’s x and y arguments with the [[ syntax, eg. DF[[x_column]]\n\nHints: ggplot2\n\nThis function has one step: taking an input data.frame and generating a plot.\nThe function’s arguments should include the data.frame, as well as the column names for the X and Y axes.\nThere are two main options:\n\nPass the data.frame’s to ggplot’s data argument then use the .data[[col]] syntax to wrap the x_col and y_col arguments (quoted column names) within aes.\nPass the data.frame’s to ggplot’s data argument then use the {{ }} “embrace operator” to wrap the x_col and y_col arguments (unquoted* column names) within aes.\n\nSee the ?aes help page and the example with the “embrace operator”, and more details here: https://ggplot2.tidyverse.org/articles/ggplot2-in-packages.html#using-aes-and-vars-in-a-package-function\n\nInstruction: add the following checks to your plot_xy() function and test them in your test script (tests/test_plot_xy.R).\n\ncheck if the columns provided to the x_col and y_col arguments exist in the data.frame (quoted column name arguments)\ncheck if the plot generated is of class ggplot before returning (ggplot2)\n\n\nHints: unquoted column names with ggplot2\n\nIf you opted to use unquoted column names, it might be trickier to check if column names exist in the data.frame. However - this check is already covered by ggplot() anyways.\nIn case you wanted to add this, on top of the internal ggplot2 check, try something like this:\nas_name(enquo(x_col)) %in% colnames(DT)\nThese are rlang functions, part of the “tidy eval tools” and examples of metaprogramming. The Advanced R book has a detailed section on this concept.\n\n\nInstruction: add the following checks to your prepare_csv() function and test them in your test script (tests/test_prepare_csv.R).\n\ncheck if the path points to a file that exists\nbefore returning the object, check that it is a data.frame\n\nWrite more informative errors for your stopifnot() checks using the following syntax:\nstopifnot(\"error message\" = logical_statement)\nFor example,\nstopifnot(\"x is not a numeric\" = is.numeric(x))"
  },
  {
    "objectID": "exercises/04-functions-control-flow.html",
    "href": "exercises/04-functions-control-flow.html",
    "title": "2023 CSEE Reproducible workflow workshop",
    "section": "",
    "text": "Conditionals in functions are used to modify how a function runs, determine what output to return or to return warnings and errors depending on logical statements. We’ll look at if and else, as well as functions for combining multiple logical statements. if and else can be used instead of stopifnot, usually in cases where logical statements are more complex or a more elaborate error message is required.\nThe following functions are essential for controlling flow in R:\n\n\nif else (and else if)\n\n||, && combine multiple logical expressions and short-circuit when || sees the first true and && sees the first false\n\n|, & are vectorized and cannot be directly used in an if statement unless you also use any, all\n\n\n\n\nInstruction: Write a series of if else conditional statements for the following objects then consult the solution to check your work.\nNumeric\n\nif x is a numeric, return x as a character\nprint ‘positive’ if x is greater than 0, else print ‘negative’ if x is less than 0\nif x / 3 returns a remainder (hint: see ?`%%`), print the remainder\n\n\nx <- 10\n\n\nShow solution\n\nif (is.numeric(x)) {\n    as.character(x)\n}\n\n[1] \"10\"\n\nif (x > 0) {\n    print('positive')\n} else if (x < 0) {\n    print('negative')\n}\n\n[1] \"positive\"\n\nif (x %% 3) {\n    print(x %% 3)\n}\n\n[1] 1\n\n\ndata.frame\n\nreturn the column ‘colors’ if it exists in DF\nif type is ‘histogram’, plot a histogram of DF’s column ‘numbers’\n\n\nDF <- data.frame(colors = c('red', 'green', 'blue'), numbers = c(42.1, 2L, 10))\ntype <- 'histogram'\n\n\nShow solution\n\nif ('colors' %in% colnames(DF)) {\n    DF['colors']\n}\n\n  colors\n1    red\n2  green\n3   blue\n\nif (type == 'histogram') {\n    hist(DF$numbers)\n}\n\n\n\n\n\nNext we’ll write a new function that processes our prepared CSV files.\nLet’s say we wanted to summarize the number of adults and chicks counted by island. First, write a function to sum the ‘adults’ and ‘chicks’ columns in the data.frame. Use the example data that we prepared with our prepare_csv function.\nFollow the steps from our approach to developing functions:\n\nSetup the function\n\nMake a function script in the R/ directory named sum_counts.R\n\nWrite the function’s skeleton (name, arguments, curly braces)\n\n\nSetup the test script\n\nMake a corresponding test script in the tests/ directory named test_sum_counts.R.\nLoad any required packages (library(package))\nSource the function (source('R/function.R))\nLoad example data and/or arguments for the function\n\n\n\nSince we have already built a function for preparing CSV files, use it in your test script:\n\npath_counts <- file.path('raw-data', 'adelie-adult-chick-counts.csv')\nprep_counts <- prepare_csv(path_counts)\n\nAdd a new section ‘Development’ in the test script (tests/test_sum_counts.R) to develop the body of your function. Use the prepared CSV data as shown above, add the code to your function sum_counts() and test!\n\nHints: by\n\ndata.table has an argument by\ndplyr has an alternative to group_by for passing character column names called group_by_at\nNext steps:\n\ndecide if it is better for you (or a potential user) to set the columns that we calculate the sum by inside the function (fixed) or as an argument (flexible) - try both options\nadd a filter argument filter_gt_year (default set to NULL) and when it is not NULL, filter the data only greater than the value provided\n\nTest these as you go in your test script tests/test_sum_counts.R.\n\nHints: defaults\n\nTo set a function’s argument to default, use the syntax argument = default_value. For example:\nfunction(x = 1, y = 2, z = 3) {\n\n}\n\nAdd checks to your functions plot_xy() and sum_counts:\n\nuse the arguments x_col and y_col to also update the axis labels in plot_xy() (base R)\nuse a new argument color_col to provide a column in plot_xy()\n\nbuild a plot function that plots the output of sum_counts()"
  },
  {
    "objectID": "exercises/01-functions-introduction.html",
    "href": "exercises/01-functions-introduction.html",
    "title": "2023 CSEE Reproducible workflow workshop",
    "section": "",
    "text": "Learning goal: Identify the structure of functions in terms of inputs, arguments, return objects and naming.\nInstruction: Pick three functions of your choice and note their characteristics. (pairs)\nFor example:\n\nname\narguments (inputs, options)\nreturn object (outputs)\n\nFeel free to look up documentation online, in the R help manual on your computer through RStudio or using the ? and ?? commands.\nWe encourage you to find your own functions, maybe a function you use or have wanted to learn about. If you can’t think of any right now, see for example stats::lm(), stats::runif(), or (trickier) base::do.call().\n\nInstruction: For the following tasks, write a function’s name, arguments and return object. Do this on paper, or in a blank text document - we are not writing code yet.\nFirst round (solo)\n\nCount the number of values greater than 0 in one column of a data.frame\nFilter rows in one column of a data.frame that match a string\nPlot a histogram for each vector of numbers in a list\n\nLearning goal: Reframe how we might think of code for an analysis as a series of steps instead as inputs, outputs, and arguments of functions.\nSecond round (together)\n\nAggregate columns of a data.frame by a grouping column, calculate a metric, and make two summary plots\nPrint summary statistics, make a diagnostic plot, filter based on an input argument, and write out a spreadsheet\n\nLearning goal: identify when a function’s goal is too complex and could be split into subfunctions that are easier to develop and test.\n\nInstruction: Read the following functions and note what you expect they will output. We have purposely used vague function names in this case - not our typical recommendation! When you are ready, click “Show output”.\nFunction 1\n\napple <- 'green'\n\nf <- function(x) {\n  nchar(x)\n}\n\nf(apple)\n\n\nShow output\n\n\n[1] 5\n\n\nFunction 2\n\napple <- 'gala'\n\nf <- function(x, times) {\n  rep(x, times = times)\n}\n\nf(apple, 10)\n\n\nShow output\n\n\n [1] \"gala\" \"gala\" \"gala\" \"gala\" \"gala\" \"gala\" \"gala\" \"gala\" \"gala\" \"gala\"\n\n\nFunction 3\n\napple <- 'mcintosh'\npotato <- 'russet'\n\nf <- function(apple, potato) {\n  data.frame(apples = apple, potatoes = potato)\n}\n\nf(potato = potato)\n\n\nShow output\n\n\nError in data.frame(apples = apple, potatoes = potato): argument \"apple\" is missing, with no default"
  },
  {
    "objectID": "exercises/00-projects-setup.html",
    "href": "exercises/00-projects-setup.html",
    "title": "2023 CSEE Reproducible workflow workshop",
    "section": "",
    "text": "We are going to set up an RStudio Project that we will use for the rest of this workshop. Please follow along with these steps and remember, if you are lost use your red sticky note or raise your hand and someone will come help you.\n\nOpen RStudio and navigate to the upper right hand corner\nClick on the drop-down menu and select the first option: “New Project…”\n\nAlternatively, navigate to the top left corner, click “File”, and then click “New Project…”\n\nSelect “New Directory”, then “New Project”\nName the directory “2023-CSEE-workshop-projects” and navigate to the subdirectory in your computer where you want the folder to appear\nMinimize RStudio and using your file navigation system, navigate to the place on the computer where your project is saved (e.g., Downloads)\nOpen the folder (you should see one file in there, an .Rproj file with the name you gave the folder)\n\nCreate five folders within your project folder:\n\nraw-data\noutput\ngraphics\nscripts\nR\n\n\nDownload the data from this link and move it into the raw-data/ folder\nOpen your project in RStudio\nOpen an empty R script and save it as “README.md”\nFill in your README file using one of the templates found HERE (add link)\n\n\n\n\n\n\n\nNote\n\n\n\nThere are many questions you may not have the answers to for this exercise - either make them up or ignore them! Do your best to answer what you can (while thinking about how you may alter/use this format in your own life/projects)\n\n\n\n(If you have time) Share this directory with a neighbour as a zip file and see if you can each open and work with each other’s project"
  },
  {
    "objectID": "exercises/05-functions-bonus.html",
    "href": "exercises/05-functions-bonus.html",
    "title": "2023 CSEE Reproducible workflow workshop",
    "section": "",
    "text": "If you are already done all the previous exercises and we have extra time, - or on your own after the workshop, try these additional exercises.\n\ntestthat is one of the main R packages for testing functions (specifically designed for R packages).\nBriefly, the approach is to write test scripts that have a series of expectations for the functions. For example, does the function return a particular class or does the function return an error when expected?\n\nlibrary(testthat)\ngrep('expect_', lsf.str('package:testthat'), value = TRUE)\n\n [1] \"expect_condition\"          \"expect_cpp_tests_pass\"    \n [3] \"expect_equal\"              \"expect_equal_to_reference\"\n [5] \"expect_equivalent\"         \"expect_error\"             \n [7] \"expect_failure\"            \"expect_false\"             \n [9] \"expect_gt\"                 \"expect_gte\"               \n[11] \"expect_identical\"          \"expect_invisible\"         \n[13] \"expect_is\"                 \"expect_known_hash\"        \n[15] \"expect_known_output\"       \"expect_known_value\"       \n[17] \"expect_length\"             \"expect_less_than\"         \n[19] \"expect_lt\"                 \"expect_lte\"               \n[21] \"expect_mapequal\"           \"expect_match\"             \n[23] \"expect_message\"            \"expect_more_than\"         \n[25] \"expect_named\"              \"expect_no_condition\"      \n[27] \"expect_no_error\"           \"expect_no_match\"          \n[29] \"expect_no_message\"         \"expect_no_warning\"        \n[31] \"expect_null\"               \"expect_output\"            \n[33] \"expect_output_file\"        \"expect_reference\"         \n[35] \"expect_s3_class\"           \"expect_s4_class\"          \n[37] \"expect_setequal\"           \"expect_silent\"            \n[39] \"expect_snapshot\"           \"expect_snapshot_error\"    \n[41] \"expect_snapshot_file\"      \"expect_snapshot_output\"   \n[43] \"expect_snapshot_value\"     \"expect_snapshot_warning\"  \n[45] \"expect_success\"            \"expect_that\"              \n[47] \"expect_true\"               \"expect_type\"              \n[49] \"expect_vector\"             \"expect_visible\"           \n[51] \"expect_warning\"           \n\n\nSee the reference and vignettes here: https://testthat.r-lib.org/\n\nTry iterating functions over lists or groups using the apply family or purrr::map family.\n\nhttps://r4ds.had.co.nz/iteration.html\nhttps://swcarpentry.github.io/r-novice-inflammation/15-supp-loops-in-depth.html\nhttps://purrr.tidyverse.org/\n\nRead about object-oriented programming classes in R:\n\nS3\nR6\nS4\n\nTry the lexical scoping exercises here:\n\nhttps://adv-r.hadley.nz/functions.html#lexical-scoping"
  },
  {
    "objectID": "slides/projects.html#learning-goals-9h00---10h05",
    "href": "slides/projects.html#learning-goals-9h00---10h05",
    "title": "Project Setup & Management",
    "section": "Learning Goals (9h00 - 10h05)",
    "text": "Learning Goals (9h00 - 10h05)\n\nConstruct a RStudio project that is thoroughly documented using file structure and data management best practices\nUse RStudio projects to effectively share their own work, and use other people’s\n\n\n\n\n\n\n\nTip\n\n\nResources for more information and further reading on any topic in this workshop can be found here (ADD LINK)"
  },
  {
    "objectID": "slides/projects.html#structure-group-discussion-15-mins",
    "href": "slides/projects.html#structure-group-discussion-15-mins",
    "title": "Project Setup & Management",
    "section": "Structure: Group Discussion (15 mins)",
    "text": "Structure: Group Discussion (15 mins)\nWhen you are starting the analysis for a project, what are the pieces that make up your project?\n\nHow do we organize these into groups?"
  },
  {
    "objectID": "slides/projects.html#readme-thinkpairshare-30-mins",
    "href": "slides/projects.html#readme-thinkpairshare-30-mins",
    "title": "Project Setup & Management",
    "section": "README: Think/Pair/Share (30 mins)",
    "text": "README: Think/Pair/Share (30 mins)\n\nREADMEs are a landing page to our projects\nWhat do you need know when you first interact with someone’s project?\n\nPerson 1: project creator / Person 2: project user\nCome up with a list of attributes, information, etc. that you would need to use this project (to be shared later)\nScenario A: Graduated lab member + new lab member\nScenario B: Dataset/code from published paper + professional accessing these"
  },
  {
    "objectID": "slides/projects.html#rstudio-project-setup-20-mins",
    "href": "slides/projects.html#rstudio-project-setup-20-mins",
    "title": "Project Setup & Management",
    "section": "RStudio Project Setup (20 mins)",
    "text": "RStudio Project Setup (20 mins)\n\nWe have the pieces of the project and info we need in the README: let’s set up an RStudio Project\nMany advantages (outlined in Resources ADD LINK)"
  },
  {
    "objectID": "slides/projects.html#break-15-mins",
    "href": "slides/projects.html#break-15-mins",
    "title": "Project Setup & Management",
    "section": "BREAK (15 mins)",
    "text": "BREAK (15 mins)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "2023 CSEE Reproducible workflow workshop",
    "section": "",
    "text": "Intros to us?\n\nOverall\n\nApproach analyses in a more holistic way (whole project vs script by script)\nShare data across projects and software versions with minimal stress \nUse workflows that reduce analysis errors and mental load\n\nSection 1: Projects\n\nConstruct a RStudio project that is thoroughly documented using file structure and data management best practices\nUse RStudio projects to effectively share their own work, and use other people’s\n\nSection 2: Functions\n\nRead and understand structure of functions in R\nRefactor code into functions that do one thing\nAdd tests and checks to ensure functions work and error when expected\nRecognize the value of functions as chunks of code that are reusable and easier to debug\n\nSection 3: Workflows\n\n(For a given project) map out relationships between inputs, outputs and analysis steps\nIdentify discrete chunks/steps and write corresponding (or use available) functions \nExecute a workflow in {targets} that reads in data, performs a function, and saves an output\nRecognize the value of workflows for reducing mental load and improving efficiency\n\nSection 4: Reproducibility/Longevity\n\nUse conflicted to detect conflicting function names\nUse renv to preserve current package versions to ensure the environment is reproducible, portable and isolated\n\nThis workshop is aimed at improving our ability to use and create reproducible workflows. All the materials should be accessible from the side bar (slides, exercises, resources for further reading, and the link to the GitHub repository can be accessed by clicking on the GitHub icon).\nAlec sent an email on what you need to get started, but just in case you need a refresher (or are accessing this in the future), here is the info:\nWe don’t have any strict dependencies on specific R or package versions, but it would be good to have at least R version 4.0 and a recent version of RStudio. \nWe are using Quarto to build the workshop’s website and exercises, so it could be helpful for you to install it too. If you don’t have time to, you can always complete exercises in an R script - so no pressure. \nInstall first the program from the link below, then the package with the command at the bottom.https://quarto.org/docs/get-started/\nIn addition, please install the following packages (after updating R):\n\ntargets\nigraph\ndata.table\ndplyr\nggplot2\ntestthat\njanitor\nrenv\nrlang\nconflicted\npalmerpenguins\nvisNetwork\nquarto (if you installed the Quarto CLI above)\n\nHere’s some R code for installing those:\n\npkgs <- c(\n  'targets',\n  'igraph',\n  'data.table',\n  'dplyr',\n  'ggplot2',\n  'testthat',\n  'janitor',\n  'renv',\n  'rlang',\n  'conflicted',\n  'palmerpenguins',\n  'visNetwork',\n  'quarto'\n)\n\ninstall.packages(pkgs)\n\n\nProjects (1h5m)\n\nDirectories\nREADMEs\nRStudio Projects\n\nBreak (10m)\nFunctions (1h45m)\n\nIntroduction\nRecommended approach\nChecks\nOptions\n\nLunch (1h)\nTargets (2h)\n\nIntroduction\nWriting workflows\nVisualizing\nRunning workflows\nExtensions\n\nBreak (15m)\nRenv+Conflicted (30m)\n\nSaving package versions\nChecking conflicting names"
  }
]