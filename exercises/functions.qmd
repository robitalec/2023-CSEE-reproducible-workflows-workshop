# Exercises: Functions

## Function structure (pairs)

Pick three functions of your choice and note their characteristics. For example:

- name
- arguments (inputs, options)
- return object (outputs)

Feel free to find these online, in the R help manual on your computer through RStudio or using the `?` and `??` commands. 

For example, `stats::lm()`, `stats::runif()`, or (trickier) `base::do.call()`


- (complexity/do one thing)
    - (on paper) write a function's name, arguments and return object for the following tasks
        - count the number of values great than 0 in a column of a data.frame
        - find rows in a column of a data.frame that match a string
        - (now, can we go back and make our functions more generic?)
    - what does this function do?
- development workflow
    - write a function script
    - set up skeleton
    - write a test script that sources the function script
    - make changes to function, test, repeat
    - try now with the paper results to the above tasks
- checking
    - what are some kinds of things that we might want to check in function inputs and arguments (think pair share)
    - use `x <- seq.int(10)` and write checks with `stopifnot` for 
        - if x is a type that isnt numeric
        - if x is NULL
        - if x is NA
        - if x is ... 
    - add checks to your above functions
    - add a test for your function that should error
- control flow
    - what kinds of arguments might we add to give users options
    - use `if` `then`
    - add `if` `then` statements to above functions
    - add a test for your function that should give different results depending on your conditional statement
- bonus





1. Functions: intro
2. Functions: development
    - workflow
    - write test script
    - source function
    - write test
    - repeat
3. Functions: checking
    - stopifnot
4. Functions: control flow
    - if else
5. Functions: bonus
    - testthat
    - iterate with apply, map
    - s3 classes
    






Function structure

Reading functions

Control flow

Scoping




- turn this into a function
    - from code
    - from description of function eg. takes a vector and does XYZ
- control flow
    - build an if else
    - use an argument in an if else 
- what does this function do
    - on slide
    - in R with view source
- scoping (what will this function return)
    - eg https://adv-r.hadley.nz/functions.html#lexical-scoping

#