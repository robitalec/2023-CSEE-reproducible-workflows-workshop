# Extensions

Let's look at a {targets} pipeline that more closely resembles what a full project would look like including figures, model, output, tables and a manuscript object. We'll start with a demo, so we can show off some of the power and extended features of {targets}, then we can work piece by piece to build it up through exercises. 

Also check out some examples of full {targets} pipelines that we've developed to get a sense for the various applications and approaches that can be used. 

- data cleaning and preparation pipeline  - prepare locs
- movement ecology method -  issa 
- remote sensing / spatial application - rgee extract
- Bayesian models with {brms} - statistical rethinking colearning solutions
- downloading tables from google sheets, full manuscript render as website and pdf - comprehensive exam



## Demo

With our extended {targets} pipeline, we'll go through the following steps:

1. Visualize the pipeline's steps and interdependencies. 

```r
tar_visnetwork()
```

2. Run the workflow

```r
tar_make()
```

3. Explore the results

Figures

```{r}
library(fs)
dir_tree('../../figures')
```

Output files

```{r}
dir_tree('../../output')
```

TODO fix file path when full site quarto render


4. Look at the rendered manuscript document

Open the TODO path HTML or PDF documents

6. Now to make some changes

    a. Edit the raw-data file, for example by adding new rows to mimic more data being collected. Note: please do not edit raw data, this is just to illustrate how {targets}tracks external files for changes. Rerun `tar_make()`. 
    b. Delete an output figure. Rerun `tar_make()`. 
    c. Add a filter step before the group counts target. Rerun `tar_make()`

    # Files
    tar_target(
        file_counts,
        path_counts,
        format = 'file'
    ),



group by
 # Group
    tar_group_by(
        group_counts,
        prep_counts,
        island
    ),

dynamic branching over groups
pattern = map()
 

    # Sum counts by group
    tar_target(
        sum_groups,
        sum_counts(group_counts, 'island'),
        pattern = map(group_counts)
    ),


plot by group
iteration = list

    # Plot by group
    tar_target(
        plot_groups,
        plot_xy(group_counts, x_col, y_col),
        pattern = map(group_counts),
        iteration = 'list'
    ),


save plots
format file
iteration list
map over multiple
    # Save plots
    tar_target(
        save_plot,
        ggsave(filename = file.path('figures', group_counts[1, ]$island),
               plot = plot_groups,
               device = 'png'),
        pattern = map(plot_groups, group_counts),
        format = 'file',
        iteration = 'list'


## External files

{targets} can be used to track external files for changes. 




## {tarchetypes}


### `tar_group_by()`



TODO 

tar_group_by
plot
iteration = list
pattern = map()
format = file



## Recommendations
TODO

start your next project with targets, easier to start then refactor a whole project especially if it isnt using functions


Git Ignore the _targets/ directory 

## Bonus
TODO

format = file
tar_option_set
- fs 
- error
