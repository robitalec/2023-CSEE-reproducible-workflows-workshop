# Extensions

Let's look at a {targets} pipeline that more closely resembles what a full project would look like including figures, model, output, tables and a manuscript object. We'll start with a demo, so we can show off some of the power and extended features of {targets}, then we can work piece by piece to build it up through exercises. 

Also check out some examples of full {targets} pipelines that we've developed to get a sense for the various applications and approaches that can be used. 

- data cleaning and preparation pipeline  - prepare locs
- movement ecology method -  issa 
- remote sensing / spatial application - rgee extract
- Bayesian models with {brms} - statistical rethinking colearning solutions
- downloading tables from google sheets, full manuscript render as website and pdf - comprehensive exam



## Demo

With our extended {targets} pipeline, we'll go through the following steps:

1. Visualize the pipeline's steps and interdependencies. 

```r
tar_visnetwork()
```

2. Run the workflow

```r
tar_make()
```

3. Explore the results

Figures

```{r}
library(fs)
dir_tree('../../figures')
```

Output files

```{r}
dir_tree('../../output')
```

TODO fix file path when full site quarto render


4. Look at the rendered manuscript document

Open the TODO path HTML or PDF documents

6. Now to make some changes

    a. Edit the raw-data file, for example by adding new rows to mimic more data being collected. Note: please do not edit raw data, this is just to illustrate how {targets}tracks external files for changes. Rerun `tar_make()`. 
    b. Delete an output figure. Rerun `tar_make()`. 
    c. Add a filter step before the group counts target. Rerun `tar_make()`


## Details

Obviously, this is an overwhelming amount of new {targets} functions and extensions combined with other packages and Quarto to render an example manuscript and output figures and tables. We'll walk through each of the pieces and how they relate to each other, and we hope this is a useful resource for when you bring {targets} to your next project. 


### Iterating

Like we mentioned in the functions resources, there are plenty of options in R for iterating including: 

- the `apply` family
- {purrr}
- {dplyr} with {group_by} and {mutate}
- {data.table}'s by

{targets} offers a new approach that integrates into our pipeline seamlessly and extends our functions to run over groups of rows in a data.frame. There are two steps:

1. Use the {tarchetypes} function `tar_group_by()` to define the variables to group the data.frame on. 
1. Use "dynamic branching" with the `tar_target()` argument `pattern`. 

For example:

`_targets.R`

```r
#...
c(
    # Group the mtcars data.frame by the values in the column "cyl"
    tar_group_by(
        group_counts,
        mtcars,
        cyl
    ),

    # Averages by group
    tar_target(
        mean_mpg,
        mean(mtcars$mpg),
        pattern = map(mtcars)
    ),

    # Summarize all the cars
    tar_target(
        summarize_cars,
        summarize(group_counts)
    )
)
```

We pass the data.frame to the `command` argument, and the following arguments are the column names to group on (in this case `cyl`). Then downstream targets that want to iterate over the groups of rows use the argument `pattern` with the function `map()`. The target corresponding to the grouped data.frame is passed to `map()`. 

If you want to use the full dataset, ungrouped, again downstream simply refer to the target without the `pattern` argument and {targets} will automatically combine the data.frame again. 



TODO link to tar_rep etc as extras

also see static branching

### Files


{targets} can be used to track external files for changes. 

input files but also outputs (saved plots, saved tables)

format file

    # Files
    tar_target(
        file_counts,
        path_counts,
        format = 'file'
    ),




### Plots

if you want to iterate over plots again (say to save), 
use iteration list





plot by group
iteration = list

    # Plot by group
    tar_target(
        plot_groups,
        plot_xy(group_counts, x_col, y_col),
        pattern = map(group_counts),
        iteration = 'list'
    ),

    # Save plots
    tar_target(
        save_plot,
        ggsave(filename = file.path('figures', group_counts[1, ]$island),
               plot = plot_groups,
               device = 'png'),
        pattern = map(plot_groups, group_counts),
        format = 'file'

### Models

same as plots, f you want to iterate over again use iteration list


**TODO**
TODO: look for tar_group_by_command source
TODO: open PR add test for is_grouped_df from tar_group_by
TODO: simplest way to get dynamic branch indexing vars


 

save plots
format file
iteration list
map over multiple




## Recommendations
TODO

start your next project with targets, easier to start then refactor a whole project especially if it isnt using functions


Git Ignore the _targets/ directory 



## Bonus
TODO

format = file
tar_option_set
    - for `data.table` use {qs} and format qs
    - what to do on error (link)

