
# Controlling flow in function

Conditionals in functions are used to modify how a function runs, determine what output to return or to return warnings and errors depending on logical statements. We'll look at `if` and `else`, as well as functions for combining multiple logical statements. `if` and `else` can be used instead of `stopifnot`, usually in cases where logical statements are more complex or a more elaborate error message is required. 

The following functions are essential for controlling flow in R:

- `if` `else` (and `else if`)
- `||`, `&&` combine multiple logical expressions and short-circuit when `||` sees the first true and `&&` sees the first false
- `|`, `&` are vectorized and cannot be directly used in an `if` statement unless you also use `any`, `all`


## Exercises: function conditionals

### Conditional statements

Instruction: Write a series of `if` `else` conditional statements for the following objects then consult the solution to check your work. 

Numeric

- if x is a numeric, return x as a character
- print 'positive' if x is greater than 0, else print 'negative' if x is less than 0
- if x / 3 returns a remainder (hint: see `?%%`), print the remainder

```{r}
x <- 10
```

<details>
<summary>Show solution</summary>
```{r}
if (is.numeric(x)) {
    as.character(x)
}

if (x > 0) {
    print('positive')
} else if (x < 0) {
    print('negative')
}

if (x %% 3) {
    print(x %% 3)
}
```
</details>

data.frame

- return the column 'colors' if it exists in DF
- if type is 'histogram', plot a histogram of DF's column 'numbers'


```{r}
DF <- data.frame(colors = c('red', 'green', 'blue'), numbers = c(42.1, 2L, 10))
type <- 'histogram'
```

<details>
<summary>Show solution</summary>
```{r}
if ('colors' %in% colnames(DF)) {
    DF['colors']
}

if (type == 'histogram') {
    hist(DF$numbers)
}
```
</details>


### Writing conditional statements

First, write a function to plot a data.frame providing columns names for the data to be plotted on the x and y axes. Use the example data that we prepared with our `prepare_csv` function. 

Follow the steps from our approach to developing functions:

1. Setup the function
    - Make a function script in the `R/` directory named `plot_xy.R`
    - Write the function's skeleton (name, arguments, curly braces)
1. Setup the test script
    - Make a corresponding test script in the `tests/` directory named `test_plot_xy.R`. 
    - Load any required packages (`library(package)`)
    - Source the function (`source('R/function.R)`)
    - Load example data and/or arguments for the function 

Since we have already built a function for preparing CSV files, use it in your test script:

```{r, eval = FALSE}
path_counts <- file.path('raw-data', 'adelie-adult-chick-counts.csv')
prep_counts <- prepare_csv(path_counts)
```


Add a new section 'Development' in the test script (`tests/test_plot_xy.R`) to develop the body of your function. Use the prepared CSV data as shown above, and your choice of base R plotting or `ggplot2`. Add the code to your function `plot_xy()` and test!


<details>
<summary>Hints: base R</summary>
<hr>
This function has one step: taking an input data.frame and generating a plot. 

The function's arguments should include the data.frame, as well as the column names for the X and Y axes. 

Pass the data.frame's to the plot function's x and y arguments with the `[[` syntax, eg. `DF[[x_column]]`
<hr>
</details>

<details>
<summary>Hints: `ggplot2`</summary>
<hr>
This function has one step: taking an input data.frame and generating a plot. 

The function's arguments should include the data.frame, as well as the column names for the X and Y axes. 

Pass the data.frame's to ggplot's data argument then use the `{{ }}` "embrace operator" to wrap the x_col and y_col arguments within `aes`. See the `?aes` help page and the example with the "embrace operator". 
<hr>
</details>


Now we'll write conditional statements for our `plot_xy()` function:

- add an argument to your function that provides a title (and set it NULL by default). When it is provided, add it as the main title of the plot.


- control flow
    - what kinds of arguments might we add to give users options
    - use `if` `then`
    - add `if` `then` statements to above functions
    - add a test for your function that should give different results depending on your conditional statement



