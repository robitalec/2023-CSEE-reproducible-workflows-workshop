# {targets}: setup

TODO

## `_targets.R`

The `_targets.R` is where we declare our {targets} workflow. It is an R file saved in the root directory of your project. The generalized structure of a `_targets.R` file is:

- Load packages
- Set options and variables
- End in a list of targets

Note: a `_targets.R` **must** end in a list of targets. 

A simple `_targets.R` script could be:

```r
library(targets)

data(mtcars)

c(
    tar_target(
        histogram_mpg, 
        hist(mtcars$mpg)
    )
)
```

### Exercise: `_targets.R`

Instruction: make a new file in the root directory of your project named `_targets.R`. At the top, load {targets} and at the bottom put an empty list `c( )`


Sometimes, when a project gets really big, you can define your list of targets in separate files and bring them altogether in the `_targets.R` file. See example TODO




## Packages

To declare which packages we need across all our functions, we have two main options:

1. List them with `library()` calls at the top of our `_targets.R` script
2. List them all in a `R/packages.R` script and source that script. 

We prefer the second approach because it keeps our `_targets.R` tidier, and helps us setup {renv} package versioning later. TODO packages get long messy, convenient to source later 

### Exercise: `packages.R`

Instruction: make a new script called `packages.R` in the `R/` directory. Go through your test scripts for your functions and add all the packages you used to the `packages.R` file with a `library()` call for each package on a separate line. 

For example:

`R/packages.R`

```r
library(targets)
library(data.table)
library(ggplot2)
```

Instruction: next, add a command to source the `R/packages.R` in your `_targets.R` script. 


## Functions

To make functions available to the {targets} workflow we also need to also source them. 

A shortcut for sourcing all R files in a specific folder is provided by {targets}: `tar_source()`

TODO details

### Exercise: sourcing functions

Instruction: replace the above `source('R/packages.R')` command with `tar_source('R')` to source all the files in the `R/` directory

Note: something to be careful about now that we are sourcing the `R/` directory - you can't have any calls to {targets} functions like `tar_read()` or `tar_load()`. This will cause an error, because you are 


## Options


`tar_option_set()` for default file format, what to do when you have an error, etc

TODO we'll come back to tar_option_set later, but details here https://docs.ropensci.org/targets/reference/tar_option_set.html

formats https://docs.ropensci.org/targets/reference/tar_option_set.html#storage-formats

tar_option_set(cue = tar_cue(mode = "always"))

### Exercise: options

Instruction: make a new section named Options, put an empty call to tar_option_set there


## Variables

A section at the top of your `_targets.R` that defines variables that you might tweak or modify can make it really nice when you are working with {targets}

Also helps to define things like variables for paths to different files etc

### Exercise: variables

Instruction: put a new section named Variables. add the file paths for the input files that we have been working with. 

```r
path_counts <- file.path('raw-data', 'adelie-adult-chick-counts.csv')
```

## Targets

Now that our `_targets.R` file is setup, let's add our targets

targets have two required arguments: a name and a command

name cannot match a function or anything in the global environment

command is the R command

in our case, we are going to plug in the functions we developed

it could also be eg. a ggplot() + geom_point() + ..., or a multiline statement surrounded in curly braces


### Exercise: targets

Instruction: set up three targets corresponding to the three functions we developed, using the adult and chick counts dataset


#### Bonus

Set up targets to read the two other CSV files

Set up targets to load the palmerpenguins dataset



1. Make a packages.R script, (because it's centralized, gets loaded by targets, etc, also helps later for renv+conflicted)
1. Put the functions prepare_csv, summarize counts and plot into targets with c(tar_target(, ...) (name needs to not clash with function, options for targets we'll look at in detail later but for now simple just 3 targets)
1. Run tar_visnetwork
1. Run tar_make
1. Run tar_read
1. Make an edit to something
1. Rerun tar_visnetwork
1. Rerun tar_make
1. Run tar_read
